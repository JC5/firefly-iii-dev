<?php
declare(strict_types=1);

namespace App\Command;

use League\CLImate\CLImate;
use RecursiveDirectoryIterator;
use RecursiveIteratorIterator;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use function App\Command\mb_detect_encoding;

/**
 * Class FixTranslationWarning
 */
class FixTranslationWarning extends Command
{
    private CLImate $climate;
    private string  $path;

    /**
     * CleanupCode constructor.
     *
     * @param string|null $name
     */
    public function __construct(?string $name = null)
    {
        parent::__construct($name);

        $config        = require(VARIABLES);
        $this->climate = new CLImate();
        $this->path    = sprintf('%s/resources/lang', $config['paths']['firefly_iii']);
    }

    /**
     *
     */
    protected function configure(): void
    {
        $this
            ->setName('ff3:crowdin-warning')
            ->setDescription('Fix Crowdin warning.');
    }

    /**
     * @param InputInterface  $input
     * @param OutputInterface $output
     *
     * @return int
     * @throws \Exception
     */
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        clearstatcache();
        $files = [];
        $this->climate->out('Finding files...');
        $objects = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($this->path), RecursiveIteratorIterator::SELF_FIRST);
        foreach ($objects as $name => $object) {
            if ($object->isFile()) {
                // get extension:
                $parts = explode('.', $name);
                $ext   = $parts[count($parts) - 1];
                if ('php' === $ext && !str_contains($name, 'en_US')) {
                    $files[] = $name;
                }
            }
        }
        $this->climate->out(sprintf('Found %d translation file(s)...', count($files)));

        $search  = '// Ignore this comment';
        $warning = "/*\n" .
                   " * PLEASE DO NOT EDIT THIS FILE DIRECTLY.\n" .
                   " * YOUR CHANGES WILL BE OVERWRITTEN!\n" .
                   " * YOUR PR WITH CHANGES TO THIS FILE WILL BE REJECTED!\n" .
                   " *\n" .
                   " * GO TO CROWDIN TO FIX OR CHANGE TRANSLATIONS!\n" .
                   " *\n" .
                   " * https://crowdin.com/project/firefly-iii\n" .
                   " *\n" .
                   " */\n";

        $count = 0;
        foreach ($files as $file) {
            $content  = file_get_contents($file);
            $newLines = [];
            $lines    = explode("\n", $content);
            foreach ($lines as $line) {
                $temp = trim($line);
                if($search !== $temp) {
                    $newLines[] = $line;
                }
                if($search === $temp) {
                    $newLines[] = $warning;
                    $count++;
                }
            }
            $newContent = implode("\n", $newLines);
            if(str_ends_with($newContent, "*/\n")) {
                $newContent = trim($newContent);
            }
            file_put_contents($file, $newContent);
        }
        $this->climate->out(sprintf('Replaced %d warnings.', $count));

        return 0;
    }
}
